#####
##### unit tests for building blocks
#####

using TrustRegionMethods: local_residual_model, LocalModel, cauchy_point, dogleg_boundary,
    ges_kernel, solve_model, unconstrained_optimizer, evaluate_∂F, ∂FX

"Return a closure that evaluates to the objective function of a model."
function model_objective(model::LocalModel)
    (; f, g, B) = model
    function(p)
        f + dot(p, g) + 0.5 * dot(p, B, p)
    end
end

"Basic sanity check for solver results (splat into tail arguments)."
function is_consistent_solver_results(Δ, p, p_norm, on_boundary)
    all(isfinite, p) &&
        (0 ≤ p_norm ≤ Δ) &&
        (norm(p, 2) ≈ p_norm) &&
        ((p_norm ≈ Δ) == on_boundary)
end

@testset "Nonlinear model constructor sanity checks" begin
    r = ones(2)
    J = ones(2, 2)
    @test_throws ArgumentError local_residual_model(fill(Inf, 2), J)
    @test_throws ArgumentError local_residual_model(fill(NaN, 2), J)
    @test_throws ArgumentError local_residual_model(r, fill(-Inf, 2, 2))
    @test_throws ArgumentError local_residual_model(r, fill(NaN, 2, 2))
    @test_throws DimensionMismatch local_residual_model(r, ones(3, 3))
end

@testset "Cauchy point" begin
    for _ in 1:100
        # random parameters
        n = rand(2:10)
        r = randn(n)
        J = randn(n, n)
        Δ = abs(randn())
        model = local_residual_model(r, J)
        m_obj = model_objective(model)

        # brute force calculation
        pS = - Δ .* normalize(J' * r, 2)
        opt = Optim.optimize(τ -> m_obj(pS .* τ), 0, 1, Optim.Brent())

        # calculate and compare
        pC, _, _= pC_results = @inferred cauchy_point(Δ, model)
        @test is_consistent_solver_results(Δ, pC_results...)
        @test pC ≈ (Optim.minimizer(opt) .* pS) atol = eps()^0.25 * n

        # estimated decrease invariant
        g_norm = norm(J' * r, 2)
        @test m_obj(zeros(n)) - m_obj(pC) ≥ 0.5 * g_norm * min(Δ, g_norm / norm(J' * J, 2))
    end

    # Cauchy point when q == 0
    @test cauchy_point(1.5, LocalModel(0.0, [-2.0, 1.0], [1.0 0; 2 0]))[2] ≈ 1.5
end

@testset "dogleg quadratic" begin
    for _ in 1:100
        n = rand(2:10)
        pC = randn(n)
        D = randn(n)
        while dot(D, pC) ≤ 0
            D = randn(n)
        end
        τ = rand()
        Δ = norm(pC .+ τ .* D, 2)
        @test @inferred(dogleg_boundary(Δ, D, pC)) ≈ τ
    end
end

@testset "eigensolver type stability" begin
    # we test this separately because it makes it easier to debug type inference failures
    n = 10
    model = local_residual_model(rand(n), rand(n, n))
    λ, gap, y1, y2 = @inferred ges_kernel(1.0, model, I)
    @test λ isa Float64
    @test gap::Float64 ≥ 0
    @test y1 isa Vector{Float64} && y2 isa Vector{Float64}
end

@testset "trust region solver tests" begin
    for _ in 1:100

        # random problem
        n = rand(2:10)
        model = local_residual_model(rand(n), rand(n, n))
        Δ = abs(randn())
        m_obj = model_objective(model)

        # unconstrained optimizer and Cauchy point
        pU, pU_norm = @inferred unconstrained_optimizer(model)
        @test pU_norm ≥ 0
        pC, _, _ = pC_results = cauchy_point(Δ, model)
        @test is_consistent_solver_results(Δ, pC_results...)

        # Dogleg
        pD, _, _, = pD_results = @inferred solve_model(Dogleg(), Δ, model)
        @test is_consistent_solver_results(Δ, pD_results...)
        @test m_obj(pD) ≤ m_obj(pC) # improve on Cauchy point

        # GES
        pG, _, _ = pG_results = @inferred solve_model(GeneralizedEigenSolver(), Δ, model)
        @test is_consistent_solver_results(Δ, pG_results...)
        @test m_obj(pG) ≤ m_obj(pD) # improve on dogleg
    end
end

@testset "singularities" begin
    # just some basic sanity check to see if the solver can deal with these
    singular1 = local_residual_model(ones(2), ones(2, 2))
    Δ = 1.0
    @test is_consistent_solver_results(Δ, cauchy_point(1.0, singular1)...)
    @test is_consistent_solver_results(Δ, solve_model(Dogleg(), 1.0, singular1)...)
    # FIXME: solver below could do better, just that hard case is not implemented.
    # check for that when it is.
    @test is_consistent_solver_results(Δ, solve_model(GeneralizedEigenSolver(), 1.0,
                                                      singular1)...)
end

@testset "calculate_objective_reduction" begin
    N = 10
    a = randn(N)
    b = randn(N)
    J = randn(N, N)             # NOTE: unused in calculation, just like coordinates
    Δ = TrustRegionMethods.calculate_objective_reduction(∂FX(a, a, J), ∂FX(b, b, J))
    @test sum(abs2, a) - sum(abs2, b) ≈ Δ
end

# define for comparison in the test below
function (≃)(a::∂FX, b::∂FX)
    a.x == b.x && a.residual == b.residual && a.Jacobian == b.Jacobian
end

@testset "DifferentiationInterfaces wrapper" begin
    @testset "different input types" begin
        r = 0:3
        f(x) = x .+ r
        ff = trust_region_problem(f, zeros(4))
        J = Diagonal(ones(4))
        for x in (randn(4), [1//2, 1//3, 1//4, 1//5])
            @test @inferred(evaluate_∂F(ff, x)) ≃ ∂FX(Float64.(x), Float64.(x .+ r), J)
        end
    end

    @testset "handle infeasible" begin
        f2(x) = all(x .> 0) ? x : x .+ NaN
        ff2 = trust_region_problem(f2, zeros(4))
        @test !all(isfinite, @inferred(evaluate_∂F(ff2, .-ones(4))).residual)
        @test @inferred(evaluate_∂F(ff2, ones(4))) ≃ ∂FX(ones(4), ones(4), Diagonal(ones(4)))
    end
end

@testset "large D" begin
    # NOTE the problem with this one was numerical overflow, D is too large if not normalized
    Δ = 512.0
    f = 0.0063044645662637365
    g = [0.21601354567634404, 0.1054616301258935, 0.045250164358955236,
         0.06399817262208468, -0.1847818161348957, 0.006789111765543464,
         0.09699790361098638, -0.0350334103238451, -0.18594411172443565,
         -0.02686275364857029, 0.08646347050475509, -0.029057633243694942,
         -0.14011494610642797, 0.017710156402809433, 0.10662442950361557,
         -0.029513186577660947, -4.731310206359025e-5, 2.0941617311206015e-227,
         6.817779104705208e-6, 1.2206804158142064e-8]
    B = [529.6654615265784 113.19435606164431 -65.16077177205048 91.71926406891697 -106.04806485285344 -23.66578732427331 8.356428612782866 -27.528591682442986 -126.2430977180207 -49.247938731591375 20.74344608203874 -16.958368705920122 -59.457357734967566 -11.267767565454712 2.2414189873674335 -15.773929400563457 -0.04217683571660781 2.8508394490605196e-224 0.005871071652479376 6.309176317083643e-5; 113.19435606164431 224.09556152134004 99.4062693199428 2.7511189638116345 -21.353181662607373 -49.25498829982614 -26.323127757563764 -2.5487832719544885 -42.808354787663255 -45.79712224808386 -31.543478141279657 -6.884350316374198 -9.274915371121498 -29.40190462544842 -14.811857822262901 -1.703790963287235 -0.04179444314168736 2.865967138006227e-224 0.005625035911340357 6.34205963952941e-5; -65.16077177205048 99.4062693199428 269.01285426788013 90.80131152350909 5.846035766166873 -21.787954463123228 -59.54381346809133 -28.167148615404386 24.057861369004815 -23.16668996610674 -57.46903838337104 -23.226364181429997 2.7307884839891967 -12.051272148718775 -35.82188101286061 -17.199855754144597 -0.04087571156500661 2.902626317275867e-224 0.005050850777458804 6.426909661691189e-5; 91.71926406891697 2.7511189638116345 90.80131152350909 247.751354465965 -22.45059364694831 -5.789727783986888 -20.93556520880592 -59.56444818706685 -16.22938414949444 -2.811846331175762 -13.96775302318539 -38.050214337672564 -14.92424047389143 -1.5882126508745944 -13.759769223035653 -40.40354674325459 -0.03992602723927165 2.9403819505502987e-224 0.004501690812067133 6.529459428870905e-5; -106.04806485285344 -21.353181662607373 5.846035766166873 -22.45059364694831 158.56092551700564 52.241206847762385 -0.8760691688914358 47.75661583010513 -51.23017477141635 -16.666969549366147 5.606627926608519 -10.379693559217827 -42.765619646252716 -13.919286413690756 0.0021018358253353953 -12.645657514018177 0.010858543218081051 -6.343446933940231e-224 0.0026192192250010463 6.687114880478008e-5; -23.66578732427331 -49.25498829982614 -21.787954463123228 -5.789727783986888 52.241206847762385 78.38684267940285 49.83328477096366 18.88703019169612 -18.210789171585926 -22.31394661264681 -12.43667627505443 -3.1274292705010813 -13.817845924566539 -21.226397007900534 -13.286044890295432 -5.183517198940812 0.010852942338193347 -6.342328858597411e-224 0.002611126290061133 6.682465657707294e-5; 8.356428612782866 -26.323127757563764 -59.54381346809133 -20.93556520880592 -0.8760691688914358 49.83328477096366 96.75028595128367 47.59579211477866 4.50260694161839 -14.69386516276132 -29.017969303186415 -10.20246092350413 0.13670783925016625 -13.175245788267214 -26.027552469000405 -12.820490792402275 0.010838424544210017 -6.3393128752238735e-224 0.002590126950409675 6.670448927933445e-5; -27.528591682442986 -2.5487832719544885 -28.167148615404386 -59.56444818706685 47.75661583010513 18.88703019169612 47.59579211477866 98.59210005316046 -10.895534195717493 -4.505784410737002 -13.366247408144016 -26.066816406930453 -12.725436304253472 -5.029899648152047 -12.703823441537493 -26.47904341246848 0.010820585147673293 -6.335299630484678e-224 0.0025645043984541707 6.655875453619785e-5; -126.2430977180207 -42.808354787663255 24.057861369004815 -16.22938414949444 -51.23017477141635 -18.210789171585926 4.50260694161839 -10.895534195717493 242.41797513179955 84.47323528581256 -43.35037897531708 31.804523431593445 -59.49186976516833 -17.017649119347755 8.400859921595956 -12.086018121080842 0.011132064759981295 1.5954393561292284e-224 -0.010219798094645374 5.849565719590838e-5; -49.247938731591375 -45.79712224808386 -23.16668996610674 -2.811846331175762 -16.666969549366147 -22.31394661264681 -14.69386516276132 -4.505784410737002 84.47323528581256 91.30444226812608 52.23883854068687 8.628375754250978 -21.169388585174083 -24.54137027926638 -11.899082830355995 -2.0593035594561764 0.01085226685700435 1.5819879913355652e-224 -0.009991943021359063 5.815825443474728e-5; 20.74344608203874 -31.543478141279657 -57.46903838337104 -13.96775302318539 5.606627926608519 -12.43667627505443 -29.017969303186415 -13.366247408144016 -43.35037897531708 52.23883854068687 121.90533282257441 39.92986718802655 5.9248768572763755 -17.491946604354155 -30.904970501759333 -7.863681980513685 0.010182630262780275 1.5477471355154322e-224 -0.009445977241091226 5.7296168807342e-5; -16.958368705920122 -6.884350316374198 -23.226364181429997 -38.050214337672564 -10.379693559217827 -3.1274292705010813 -10.20246092350413 -26.066816406930453 31.804523431593445 8.628375754250978 39.92986718802655 90.78213492504037 -12.029510532052628 -4.940885048308311 -15.238180137226234 -25.984894030101714 0.009500957558357857 1.5076723464905757e-224 -0.008888160803803908 5.627824882003428e-5; -59.457357734967566 -9.274915371121498 2.7307884839891967 -14.92424047389143 -42.765619646252716 -13.817845924566539 0.13670783925016625 -12.725436304253472 -59.49186976516833 -21.169388585174083 5.9248768572763755 -12.029510532052628 143.01799696321166 45.94466703111753 -1.077945176855791 41.75446978300386 0.005684116475561426 1.6891367037195808e-224 0.0035062781831455498 -0.00021752644185544555; -11.267767565454712 -29.40190462544842 -12.051272148718775 -1.5882126508745944 -13.919286413690756 -21.226397007900534 -13.175245788267214 -5.029899648152047 -17.017649119347755 -24.54137027926638 -17.491946604354155 -4.940885048308311 45.94466703111753 70.11855599899482 43.465616173135174 16.455055950919466 0.005782137148392214 1.6895597383070554e-224 0.0034407989976158178 -0.00021718208644236976; 2.2414189873674335 -14.811857822262901 -35.82188101286061 -13.759769223035653 0.0021018358253353953 -13.286044890295432 -26.027552469000405 -12.703823441537493 8.400859921595956 -11.899082830355995 -30.904970501759333 -15.238180137226234 -1.077945176855791 43.465616173135174 85.21197149020888 41.177073912371874 0.006016035235117799 1.69050549393797e-224 0.0032836333471202707 -0.00021630362178893134; -15.773929400563457 -1.703790963287235 -17.199855754144597 -40.40354674325459 -12.645657514018177 -5.183517198940812 -12.820490792402275 -26.47904341246848 -12.086018121080842 -2.0593035594561764 -7.863681980513685 -25.984894030101714 41.75446978300386 16.455055950919466 41.177073912371874 85.07997127318117 0.0062515179102678444 1.691248258796994e-224 0.0031223222841089407 -0.00021526870426278157; -0.04217683571660781 -0.04179444314168736 -0.04087571156500661 -0.03992602723927165 0.010858543218081051 0.010852942338193347 0.010838424544210017 0.010820585147673293 0.011132064759981295 0.01085226685700435 0.010182630262780275 0.009500957558357857 0.005684116475561426 0.005782137148392214 0.006016035235117799 0.0062515179102678444 2.5615839343928522e-5 -1.9667575138095422e-227 -2.7781913197354485e-6 -4.6096758931435097e-8; 2.8508394490605196e-224 2.865967138006227e-224 2.902626317275867e-224 2.9403819505502987e-224 -6.343446933940231e-224 -6.342328858597411e-224 -6.3393128752238735e-224 -6.335299630484678e-224 1.5954393561292284e-224 1.5819879913355652e-224 1.5477471355154322e-224 1.5076723464905757e-224 1.6891367037195808e-224 1.6895597383070554e-224 1.69050549393797e-224 1.691248258796994e-224 -1.9667575138095422e-227 0.0 -4.515055613936483e-228 -1.2436162087832312e-229; 0.005871071652479376 0.005625035911340357 0.005050850777458804 0.004501690812067133 0.0026192192250010463 0.002611126290061133 0.002590126950409675 0.0025645043984541707 -0.010219798094645374 -0.009991943021359063 -0.009445977241091226 -0.008888160803803908 0.0035062781831455498 0.0034407989976158178 0.0032836333471202707 0.0031223222841089407 -2.7781913197354485e-6 -4.515055613936483e-228 2.6179300903506954e-6 -1.934663091246651e-8; 6.309176317083643e-5 6.34205963952941e-5 6.426909661691189e-5 6.529459428870905e-5 6.687114880478008e-5 6.682465657707294e-5 6.670448927933445e-5 6.655875453619785e-5 5.849565719590838e-5 5.815825443474728e-5 5.7296168807342e-5 5.627824882003428e-5 -0.00021752644185544555 -0.00021718208644236976 -0.00021630362178893134 -0.00021526870426278157 -4.6096758931435097e-8 -1.2436162087832312e-229 -1.934663091246651e-8 1.5596792689322978e-9]
    model = LocalModel(f, g, Symmetric(B))
    p, p_norm, _ = pD_results = solve_model(Dogleg(), Δ, model)
    @test all(isfinite, p)
    @test isfinite(p_norm)
    @test is_consistent_solver_results(Δ, pD_results...)
end
